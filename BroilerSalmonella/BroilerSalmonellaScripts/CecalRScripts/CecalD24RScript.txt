#load packages
library(car)
library(qiime2R)
library(ape)
library(dplyr)
library(ggplot2)
library(gplots)
library(lme4)
library(phangorn)
library(phyloseq)
library(plotly)
library(tidyr)
library(vegan)
library(VennDiagram)
library(naniar)
library(zoo)
library(tidyverse)
library(ggpubr)
library(rstatix)
library(sjstats)
library(psych)
library(pwr)
library(summarytools)
library(ggfortify)
library(effsize)
library(afex)

#Transfer items from qiime to working directory (see below)
#core-metrics-results/all alpha diversity vector.qza
#core-metrics-results/all beta diversity pcoa_results.qza
#core-metrics-results/all beta diversity distance_matrix.qza
#core-metrics-results/rarefied_table.qza
#rooted-tree.qza
#taxonomy.qza
#G_Cecal_Metadata.tsv

#set working directory
setwd("C:/Users/Tessa/Desktop/Cecal_D24/R/NeededforR")

#prepare the script to produce quantile-quantile plots
qq.line = function(x) {
  y <- quantile(x[!is.na(x)], c(0.25, 0.75))
  x <- qnorm(c(0.25, 0.75))
  slope <- diff(y)/diff(x)
  int <- y[1L] - slope * x[1L]
  return(c(int = int, slope = slope))
}

#prepare the script to perform beta diversity pairwise adonis interaction testing
pairwise.adonis <- function(x,factors, sim.function = 'vegdist', sim.method = 'bray', p.adjust.m ='bonferroni',reduce=NULL,perm=999)
{
  co <- combn(unique(as.character(factors)),2)
  pairs <- c()
  Df <- c()
  SumsOfSqs <- c()
  F.Model <- c()
  R2 <- c()
  p.value <- c()
  for(elem in 1:ncol(co)){
    if(inherits(x, 'dist')){
      x1=as.matrix(x)[factors %in% c(as.character(co[1,elem]),as.character(co[2,elem])),
                      factors %in% c(as.character(co[1,elem]),as.character(co[2,elem]))]
    }
    else  (
      if (sim.function == 'daisy'){
        x1 = daisy(x[factors %in% c(co[1,elem],co[2,elem]),],metric=sim.method)
      }
      else{x1 = vegdist(x[factors %in% c(co[1,elem],co[2,elem]),],method=sim.method)}
    )
    x2 = data.frame(Fac = factors[factors %in% c(co[1,elem],co[2,elem])])
    ad <- adonis2(x1 ~ Fac, data = x2,
                  permutations = perm);
    pairs <- c(pairs,paste(co[1,elem],'vs',co[2,elem]));
    Df <- c(Df,ad$Df[1])
    SumsOfSqs <- c(SumsOfSqs,ad$SumOfSqs[1])
    F.Model <- c(F.Model,ad$F[1]);
    R2 <- c(R2,ad$R2[1]);
    p.value <- c(p.value,ad$`Pr(>F)`[1])
  }
  p.adjusted <- p.adjust(p.value,method=p.adjust.m)
  sig = c(rep('',length(p.adjusted)))
  sig[p.adjusted <= 0.05] <-'.'
  sig[p.adjusted <= 0.01] <-'*'
  sig[p.adjusted <= 0.001] <-'**'
  sig[p.adjusted <= 0.0001] <-'***'
  pairw.res <- data.frame(pairs,Df,SumsOfSqs,F.Model,R2,p.value,p.adjusted,sig)
  if(!is.null(reduce)){
    pairw.res <- subset (pairw.res, grepl(reduce,pairs))
    pairw.res$p.adjusted <- p.adjust(pairw.res$p.value,method=p.adjust.m)
    sig = c(rep('',length(pairw.res$p.adjusted)))
    sig[pairw.res$p.adjusted <= 0.1] <-'.'
    sig[pairw.res$p.adjusted <= 0.05] <-'*'
    sig[pairw.res$p.adjusted <= 0.01] <-'**'
    sig[pairw.res$p.adjusted <= 0.001] <-'***'
    pairw.res <- data.frame(pairw.res[,1:7],sig)
  }
  class(pairw.res) <- c("pwadonis", "data.frame")
  return(pairw.res)
}

#prepare for afex to run in a reproducible manner
set_sum_contrasts()

#perform this only once in the beginning. Creates a directory where outputs will be placed once made
#if(!dir.exists("output"))
#dir.create("output")

#load metadata and convert from qiime format
metadata <- read.delim("G_Cecal_Metadata.tsv", sep = "\t", header = T, quote = "\"", stringsAsFactors = F)
metadata <-read_q2metadata("G_Cecal_Metadata.tsv")

#change order of factors for age
data_new <- metadata
data_new$Age <- factor(data_new$Age,
                       levels = c("7", "13", "17", "21", "24"))

#change names of levels within variables
data_new <- mutate(data_new, Breed = recode(.x=Breed, "Ross"="CONV", "Redbro"="SG")) 
data_new <- mutate(data_new, Challenged = recode(.x=Challenged, "Y"="ST", "N"="C"))

#change variable name from Challenged to Challenge
colnames(data_new)[2]<-c("Challenge")

#read in taxonomy
taxonomy<-read_qza("taxonomy.qza")
taxonomy<-parse_taxonomy(taxonomy$data)
tax2 <- taxonomy
tax2[] <- t(apply(tax2, 1, zoo::na.locf))
tax.clean <- tax2

######################################
#Determine if alpha diversity measures are significant#
######################################
#load alpha diversity measures
evenness = read_qza("evenness_vector.qza")$data %>% rownames_to_column("SampleID")
faith_pd = read_qza("faith_pd_vector.qza")$data %>% rownames_to_column("SampleID")
observed_otus = read_qza("observed_otus_vector.qza")$data %>% rownames_to_column("SampleID")
shannon = read_qza("shannon_vector.qza")$data %>% rownames_to_column("SampleID")

#Merge all alpha diversity measures with metadata
alpha_diversity = merge(x=faith_pd, y=evenness, by.x = "SampleID", by.y = "SampleID")
alpha_diversity = merge(alpha_diversity, observed_otus, by.x = "SampleID", by.y = "SampleID")
alpha_diversity = merge(alpha_diversity, shannon, by.x = "SampleID", by.y = "SampleID")
meta = merge(data_new, alpha_diversity, by.x = "SampleID", by.y = "SampleID")
row.names(meta) = meta$Row.names
meta = meta[order(row.names(meta)),]
alpha_measures <- c("pielou_e", "faith_pd", "observed_otus", "shannon")
alpha_measures_names <- c("Pielou Evenness", "Faith Phylogenetic Diversity", "Observed ASVs", "Shannon")
str(meta)

#Shannon
#define the linear model
model_1 <- lm(data =meta, shannon ~ Breed + Challenge + Breed*Challenge)
model_1
#check GLM assumptions (homogeneity of variance and normality of residuals)
autoplot(model_1, smooth.colour = 'red')
plot(model_1$residuals)
#NOTE:appears to follow assumptions
#run anova to determine if anything is significantly different in Shannon diversity
summary(model_1)
Anova(model_1, type = 3)

#Pielou_e
#define the linear model
model_2 <- lm(data =meta, pielou_e ~ Breed + Challenge + Breed*Challenge)
model_2
#check GLM assumptions (homogeneity of variance and normality of residuals)
autoplot(model_2, smooth.colour = 'red')
plot(model_2$residuals)
#appears to follow assumptions
#run anova to determine if anything is significantly different in Pielou Evenness
summary(model_2)
Anova(model_2, type = 3)

#Faith
#define the linear model
model_3 <- lm(data =meta, faith_pd ~ Breed + Challenge + Breed*Challenge)
model_3
#check GLM assumptions (homogeneity of variance and normality of residuals)
autoplot(model_3, smooth.colour = 'red')
plot(model_3$residuals)
#NOTE: does not follow the normality of residuals assumption so will have to transform
#transform the faith_pd variable
meta <- mutate(meta, log_faith_pd = log(faith_pd))
meta <- mutate(meta, sqrt_faith_pd = sqrt(faith_pd))
#compare skewness of untransformed faith_pd to the newly transformed faith_pd
descr(meta$faith_pd, stats = c("Skewness", "Kurtosis"), style="rmarkdown")
descr(meta$log_faith_pd, stats = c("Skewness", "Kurtosis"), style="rmarkdown") 
descr(meta$sqrt_faith_pd, stats = c("Skewness", "Kurtosis"), style="rmarkdown")
#NOTE:choose log_faith_pd because it had a skewness closest to 0
#define a new model with the newly transformed faith_pd variable
model_3a <- lm(data =meta, log_faith_pd ~ Breed + Challenge + Breed*Challenge)
model_3a
#recheck GLM assumptions with the new model
autoplot(model_3a, smooth.colour = 'red')
plot(model_3a$residuals)
#NOTE:shows improvement in following the assumption
#run anova to determine if anything is significantly different in Faith phylogenetic diversity
summary(model_3a)
Anova(model_3a, type = 3)

#Observed_otus
#define the linear model
model_4 <- lm(data =meta, observed_otus ~ Breed + Challenge + Breed*Challenge)
model_4
#check GLM assumptions (homogeneity of variance and normality of residuals)
autoplot(model_4, smooth.colour = 'red')
plot(model_4$residuals)
#appears to follow assumptions
#run anova to determine if anything is significantly different in Observed OTUs
summary(model_4)
Anova(model_4, type = 3)

######################################
#See if interaction between Breed and Challenge is significant in Shannon
######################################
#Run the ANOVA and save it as an object
aov.Shannon.Challenge.Breed = aov(shannon ~ Challenge*Breed, data=meta)
#Call for the summary of that ANOVA, which will include P-values
summary(aov.Shannon.Challenge.Breed)
#To do all the pairwise comparisons between groups and correct for multiple comparisons, we run Tukey's honest significance test of our ANOVA.
TukeyHSD(aov.Shannon.Challenge.Breed)

######################################
#See if interaction between Breed and Challenge is significant in Pielou Evenness
######################################
#Run the ANOVA and save it as an object
aov.Evenness.Challenge.Breed = aov(pielou_e ~ Challenge*Breed, data=meta)
#Call for the summary of that ANOVA, which will include P-values
summary(aov.Evenness.Challenge.Breed)
#To do all the pairwise comparisons between groups and correct for multiple comparisons, we run Tukey's honest significance test of our ANOVA.
TukeyHSD(aov.Evenness.Challenge.Breed)

######################################
#See if interaction between Breed and Challenge is significant in Faith Phylogenetic Diversity
######################################
#Run the ANOVA and save it as an object
aov.Log.Faith.Challenge.Breed = aov(log_faith_pd ~ Challenge*Breed, data=meta)
#Call for the summary of that ANOVA, which will include P-values
summary(aov.Log.Faith.Challenge.Breed)
#To do all the pairwise comparisons between groups and correct for multiple comparisons, we run Tukey's honest significance test of our ANOVA.
TukeyHSD(aov.Log.Faith.Challenge.Breed)

######################################
#See if interaction between Breed and Challenge is significant in Observed OTUs
######################################
#Run the ANOVA and save it as an object
aov.Observed.Challenge.Breed = aov(observed_otus ~ Challenge*Breed, data=meta)
#Call for the summary of that ANOVA, which will include P-values
summary(aov.Observed.Challenge.Breed)
#To do all the pairwise comparisons between groups and correct for multiple comparisons, we run Tukey's honest significance test of our ANOVA.
TukeyHSD(aov.Observed.Challenge.Breed)

######################################
#Obtain alpha diversity box plots for breed#
######################################
#make a final alpha diversity data frame with the new transformed variables 
meta2 <- subset(meta, select = -c(faith_pd, sqrt_faith_pd))
alpha_measures <- c("pielou_e", "log_faith_pd", "observed_otus", "shannon")
alpha_measures_names <- c("Pielou Evenness", "Log Faith Phylogenetic Diversity", " Observed ASVs", "Shannon")
#Run the ANOVA and save it as an object
i <- 1

for(i in 1:length(alpha_measures)){
  print(alpha_measures[i])
  aov.alpha_measures = aov(get(alpha_measures[i]) ~ Breed*SampleID, data=meta)
  print(summary(aov.alpha_measures))
  
  alpha_plot <- ggplot(meta, aes(Breed, get(alpha_measures[i]))) + 
    geom_boxplot(aes(Breed)) +
    geom_point(alpha = 0.2) +
    stat_summary(fun=none, geom="point", shape=3, size=2, color="black", fill="black") +
    theme(axis.title = element_text(size = 10)) +
    theme(axis.text = element_text(size = 10)) +
    ylab(alpha_measures_names[i]) 
  ggsave(paste0("output/", alpha_measures[i], "Breed.png"), alpha_plot, height = 3, width = 5)
}

######################################
#Obtain alpha diversity box plots for challenge#
######################################
#Run the ANOVA and save it as an object
i <- 1

for(i in 1:length(alpha_measures)){
  print(alpha_measures[i])
  aov.alpha_measures = aov(get(alpha_measures[i]) ~ Challenge*SampleID, data=meta)
  print(summary(aov.alpha_measures))
  
  alpha_plot <- ggplot(meta, aes(Challenge, get(alpha_measures[i]))) + 
    geom_boxplot(aes(Challenge)) +
    geom_point(alpha = 0.2) +
    stat_summary(fun=none, geom="point", shape=3, size=2, color="black", fill="black") +
    theme(axis.title = element_text(size = 10)) +
    theme(axis.text = element_text(size = 10)) +
    ylab(alpha_measures_names[i]) 
  ggsave(paste0("output/", alpha_measures[i], "Challenge.png"), alpha_plot, height = 3, width = 5)
}

######################################
#Obtain facet alpha diversity box plots for breed and challenge#
######################################
#Run the ANOVA and save it as an object
i <- 1

for(i in 1:length(alpha_measures)){
  print(alpha_measures[i])
  aov.alpha_measures = aov(get(alpha_measures[i]) ~ Challenge*SampleID, data=meta)
  print(summary(aov.alpha_measures))
  
  alpha_plot <- ggplot(meta, aes(Challenge, color = Breed, get(alpha_measures[i]))) + 
    geom_boxplot(aes(Challenge)) + 
    stat_summary(fun=none, geom="point", shape=3, size=2, color="black", fill="black") +
    theme(axis.title = element_text(size = 10)) +
    theme(axis.text = element_text(size = 10)) +
    ylab(alpha_measures_names[i]) 
  ggsave(paste0("output/", alpha_measures[i], "ChallengeBreed.png"), alpha_plot, height = 3, width = 5)
}

######################################
#Determine if beta diversity measures are significant for breed#
######################################
#load beta diversity measures
bc_distance<-read_qza("bray_curtis_distance_matrix.qza")
UW_distance<-read_qza("unweighted_unifrac_distance_matrix.qza")
W_distance<-read_qza("weighted_unifrac_distance_matrix.qza")

#run adonis to determine if breeds are significantly different in bray-curtis
bc_distancematrix <- as.matrix(bc_distance$data)
bc_dist <- as.dist(bc_distancematrix)
row.names(bc_distancematrix) == data_new$SampleID  
metadata_filtered <- data_new[match(row.names(bc_distancematrix),data_new$SampleID),]
row.names(bc_distancematrix) == metadata_filtered$SampleID
BrayA <- adonis(bc_dist ~ metadata_filtered$Breed*metadata_filtered$Challenge, permutations = 999)
BrayA
BrayPA <- pairwise.adonis(bc_dist, factors = metadata_filtered$Profile, p.adjust.m = "BH")
BrayPA

#run adonis to determine if breeds are significantly different in Unweighted Unifrac
UW_distancematrix <- as.matrix(UW_distance$data)
UW_dist <- as.dist(UW_distancematrix)
row.names(UW_distancematrix) == data_new$SampleID  
metadata_filtered <- data_new[match(row.names(UW_distancematrix),data_new$SampleID),]
row.names(UW_distancematrix) == metadata_filtered$SampleID
UWA <- adonis(UW_dist ~ metadata_filtered$Breed*metadata_filtered$Challenge, permutations = 999)
UWA 
UWPA <- pairwise.adonis(UW_dist, factors = metadata_filtered$Profile, p.adjust.m = "BH")
UWPA

#run adonis to determine if breeds are significantly different in Weighted Unifrac
W_distancematrix <- as.matrix(W_distance$data)
W_dist <- as.dist(W_distancematrix)
row.names(W_distancematrix) == data_new$SampleID  
metadata_filtered <- data_new[match(row.names(W_distancematrix),data_new$SampleID),]
row.names(W_distancematrix) == metadata_filtered$SampleID
WA <- adonis(W_dist ~ metadata_filtered$Breed*metadata_filtered$Challenge, permutations = 999)
WA 
WPA <- pairwise.adonis(W_dist, factors = metadata_filtered$Profile, p.adjust.m = "BH")
WPA

######################################
#Obtain beta diversity (Bray-Curtis) ellipses for breed#
######################################
bc_PCoA<-read_qza("bray_curtis_pcoa_results.qza")

bc_meta <- bc_PCoA$data$Vectors %>%
  select(SampleID, PC1, PC2) %>%
  inner_join(data_new, by = c("SampleID" = "SampleID"))

my_column <- "Breed"

centroids <- aggregate(cbind(PC1,PC2)~get(my_column),bc_meta,mean)
colnames(centroids)[1] <- "Breed"

ggplot(bc_meta, aes(x=PC1, y=PC2, color=Breed)) +
  geom_point() +
  theme_q2r() +
  stat_ellipse(level = 0.95, type = "t") + 
  xlab(paste0("PC1 (", round(100*bc_PCoA$data$ProportionExplained[1], digits = 2), "%)")) +
  ylab(paste0("PC2 (", round(100*bc_PCoA$data$ProportionExplained[2], digits = 2), "%)")) +
  theme(axis.title = element_text(size = 10)) +
  theme(axis.text = element_text(size = 10)) +
  theme(legend.text = element_text(size = 10)) +
  theme(legend.title = element_text(size = 10)) 
ggsave(paste0("output/BC-ellipse_", my_column,".png"), height=3, width=4.5, device="png") 

######################################
#Obtain beta diversity (Unweighted Unifrac) ellipses for breed#
######################################
UnWuni_PCoA<-read_qza("unweighted_unifrac_pcoa_results.qza")

UnWuni_meta <- UnWuni_PCoA$data$Vectors %>%
  select(SampleID, PC1, PC2) %>%
  inner_join(data_new, by = c("SampleID" = "SampleID"))

my_column <- "Breed"

centroids <- aggregate(cbind(PC1,PC2)~get(my_column),UnWuni_meta,mean)
colnames(centroids)[1] <- "Breed"

ggplot(UnWuni_meta, aes(x=PC1, y=PC2, color=Breed)) +
  geom_point() + 
  theme_q2r() +
  stat_ellipse(level = 0.95, type = "t") +
  xlab(paste0("PC1 (", round(100*UnWuni_PCoA$data$ProportionExplained[1], digits = 2), "%)")) +
  ylab(paste0("PC2 (", round(100*UnWuni_PCoA$data$ProportionExplained[2], digits = 2), "%)")) +
  theme(axis.title = element_text(size = 10)) +
  theme(axis.text = element_text(size = 10)) +
  theme(legend.text = element_text(size = 10)) +
  theme(legend.title = element_text(size = 10)) 
ggsave(paste0("output/UnWuni-ellipse_", my_column,".png"), height=3, width=4.5, device="png") 

######################################
#Obtain beta diversity (Weighted Unifrac) ellipses for breed#
######################################
wuni_PCoA<-read_qza("weighted_unifrac_pcoa_results.qza")

wuni_meta <- wuni_PCoA$data$Vectors %>%
  select(SampleID, PC1, PC2) %>%
  inner_join(data_new, by = c("SampleID" = "SampleID"))

my_column <- "Breed"

centroids <- aggregate(cbind(PC1,PC2)~get(my_column),wuni_meta,mean)
colnames(centroids)[1] <- "Breed"

ggplot(wuni_meta, aes(x=PC1, y=PC2, color=Breed)) +
  geom_point() + 
  theme_q2r() +
  stat_ellipse(level = 0.95, type = "t") +
  xlab(paste0("PC1 (", round(100*wuni_PCoA$data$ProportionExplained[1], digits = 2), "%)")) +
  ylab(paste0("PC2 (", round(100*wuni_PCoA$data$ProportionExplained[2], digits = 2), "%)")) +
  theme(axis.title = element_text(size = 10)) +
  theme(axis.text = element_text(size = 10)) +
  theme(legend.text = element_text(size = 10)) +
  theme(legend.title = element_text(size = 10)) 
ggsave(paste0("output/wuni-ellipse_", my_column,".png"), height=3, width=4.5, device="png") 

######################################
#Obtain beta diversity (Bray-Curtis) ellipses for challenge#
######################################
bc_PCoA<-read_qza("bray_curtis_pcoa_results.qza")

bc_meta <- bc_PCoA$data$Vectors %>%
  select(SampleID, PC1, PC2) %>%
  inner_join(data_new, by = c("SampleID" = "SampleID"))

my_column <- "Challenge"

centroids <- aggregate(cbind(PC1,PC2)~get(my_column),bc_meta,mean)
colnames(centroids)[1] <- "Challenge"

ggplot(bc_meta, aes(x=PC1, y=PC2, color=Challenge)) +
  geom_point() +
  theme_q2r() +
  stat_ellipse(level = 0.95, type = "t") + 
  xlab(paste0("PC1 (", round(100*bc_PCoA$data$ProportionExplained[1], digits = 2), "%)")) +
  ylab(paste0("PC2 (", round(100*bc_PCoA$data$ProportionExplained[2], digits = 2), "%)")) +
  theme(axis.title = element_text(size = 10)) +
  theme(axis.text = element_text(size = 10)) +
  theme(legend.text = element_text(size = 10)) +
  theme(legend.title = element_text(size = 10)) 
ggsave(paste0("output/BC-ellipse_", my_column,".png"), height=3, width=4.5, device="png") 

######################################
#Obtain beta diversity (Unweighted Unifrac) ellipses for challenge#
######################################
UnWuni_PCoA<-read_qza("unweighted_unifrac_pcoa_results.qza")

UnWuni_meta <- UnWuni_PCoA$data$Vectors %>%
  select(SampleID, PC1, PC2) %>%
  inner_join(data_new, by = c("SampleID" = "SampleID"))

my_column <- "Challenge"

centroids <- aggregate(cbind(PC1,PC2)~get(my_column),UnWuni_meta,mean)
colnames(centroids)[1] <- "Challenge"

ggplot(UnWuni_meta, aes(x=PC1, y=PC2, color=Challenge)) +
  geom_point() + 
  theme_q2r() +
  stat_ellipse(level = 0.95, type = "t") +
  xlab(paste0("PC1 (", round(100*UnWuni_PCoA$data$ProportionExplained[1], digits = 2), "%)")) +
  ylab(paste0("PC2 (", round(100*UnWuni_PCoA$data$ProportionExplained[2], digits = 2), "%)")) +
  theme(axis.title = element_text(size = 10)) +
  theme(axis.text = element_text(size = 10)) +
  theme(legend.text = element_text(size = 10)) +
  theme(legend.title = element_text(size = 10)) 
ggsave(paste0("output/UnWuni-ellipse_", my_column,".png"), height=3, width=4.5, device="png") 

######################################
#Obtain beta diversity (Weighted Unifrac) ellipses for challenge#
######################################
wuni_PCoA<-read_qza("weighted_unifrac_pcoa_results.qza")

wuni_meta <- wuni_PCoA$data$Vectors %>%
  select(SampleID, PC1, PC2) %>%
  inner_join(data_new, by = c("SampleID" = "SampleID"))

my_column <- "Challenge"

centroids <- aggregate(cbind(PC1,PC2)~get(my_column),wuni_meta,mean)
colnames(centroids)[1] <- "Challenge"

ggplot(wuni_meta, aes(x=PC1, y=PC2, color=Challenge)) +
  geom_point() + 
  theme_q2r() +
  stat_ellipse(level = 0.95, type = "t") +
  xlab(paste0("PC1 (", round(100*wuni_PCoA$data$ProportionExplained[1], digits = 2), "%)")) +
  ylab(paste0("PC2 (", round(100*wuni_PCoA$data$ProportionExplained[2], digits = 2), "%)")) +
  theme(axis.title = element_text(size = 10)) +
  theme(axis.text = element_text(size = 10)) +
  theme(legend.text = element_text(size = 10)) +
  theme(legend.title = element_text(size = 10)) 
ggsave(paste0("output/wuni-ellipse_", my_column,".png"), height=3, width=4.5, device="png") 

##############################################
#Obtain Facet Beta-Diversity (Bray-Curtis) Ellipses for Challenge and Breed
##############################################
bc_PCoA<-read_qza("bray_curtis_pcoa_results.qza")

bc_meta <- bc_PCoA$data$Vectors %>%
  select(SampleID, PC1, PC2) %>%
  inner_join(data_new, by = c("SampleID" = "SampleID"))

my_column <- "Challenge"

centroids <- aggregate(cbind(PC1,PC2)~get(my_column),bc_meta,mean)
colnames(centroids)[1] <- "Challenge"

ggplot(bc_meta, aes(x=PC1, y=PC2, color=Breed)) +
  geom_point() + 
  theme_q2r() +
  stat_ellipse(level = 0.95, type = "t") +
  xlab(paste0("PC1 (", round(100*bc_PCoA$data$ProportionExplained[1], digits = 2), "%)")) +
  ylab(paste0("PC2 (", round(100*bc_PCoA$data$ProportionExplained[2], digits = 2), "%)")) +
  theme(axis.title = element_text(size = 10)) +
  theme(axis.text = element_text(size = 10)) +
  theme(legend.text = element_text(size = 10)) +
  theme(legend.title = element_text(size = 10)) +
  theme(text = element_text(size = 10))+
  facet_grid(. ~ Challenge) +
  ggsave(paste0("output/BC-ellipse_", "BreedChallenge.png"), height=3, width=8.5, device="png") 

##############################################
#Obtain Facet Beta-Diversity (Unweighted Unifrac) Ellipses for Challenge and Breed
##############################################
UnWuni_PCoA<-read_qza("unweighted_unifrac_pcoa_results.qza")

UnWuni_meta <- UnWuni_PCoA$data$Vectors %>%
  select(SampleID, PC1, PC2) %>%
  inner_join(data_new, by = c("SampleID" = "SampleID"))

my_column <- "Challenge"

centroids <- aggregate(cbind(PC1,PC2)~get(my_column),UnWuni_meta,mean)
colnames(centroids)[1] <- "Challenge"

ggplot(UnWuni_meta, aes(x=PC1, y=PC2, color=Breed)) +
  geom_point() + 
  theme_q2r() +
  stat_ellipse(level = 0.95, type = "t") +
  xlab(paste0("PC1 (", round(100*UnWuni_PCoA$data$ProportionExplained[1], digits = 2), "%)")) +
  ylab(paste0("PC2 (", round(100*UnWuni_PCoA$data$ProportionExplained[2], digits = 2), "%)")) +
  theme(axis.title = element_text(size = 10)) +
  theme(axis.text = element_text(size = 10)) +
  theme(legend.text = element_text(size = 10)) +
  theme(legend.title = element_text(size = 10)) +
  theme(text = element_text(size = 10))+
  facet_grid(. ~ Challenge) +
  ggsave(paste0("output/UnWuni-ellipse_", "BreedChallenge.png"), height=3, width=8.5, device="png") 

##############################################
#Obtain Facet Beta-Diversity (Weighted Unifrac) Ellipses for Challenge and Breed
##############################################
Wuni_PCoA<-read_qza("weighted_unifrac_pcoa_results.qza")

Wuni_meta <- Wuni_PCoA$data$Vectors %>%
  select(SampleID, PC1, PC2) %>%
  inner_join(data_new, by = c("SampleID" = "SampleID"))

my_column <- "Challenge"

centroids <- aggregate(cbind(PC1,PC2)~get(my_column),Wuni_meta,mean)
colnames(centroids)[1] <- "Challenge"

ggplot(Wuni_meta, aes(x=PC1, y=PC2, color=Breed)) +
  geom_point() + 
  theme_q2r() +
  stat_ellipse(level = 0.95, type = "t") +
  xlab(paste0("PC1 (", round(100*Wuni_PCoA$data$ProportionExplained[1], digits = 2), "%)")) +
  ylab(paste0("PC2 (", round(100*Wuni_PCoA$data$ProportionExplained[2], digits = 2), "%)")) +
  theme(axis.title = element_text(size = 10)) +
  theme(axis.text = element_text(size = 10)) +
  theme(legend.text = element_text(size = 10)) +
  theme(legend.title = element_text(size = 10)) +
  theme(text = element_text(size = 10))+
  facet_grid(. ~ Challenge) +
  ggsave(paste0("output/Wuni-ellipse_", "BreedChallenge.png"), height=3, width=8.5, device="png") 

######################################
#Obtain individual taxa bar plots for breed#
######################################
physeq <- qza_to_phyloseq(
  features="rarefied_table.qza",
  tree="rooted-tree.qza",
  "taxonomy.qza",
  metadata = "G_Cecal_Metadata.tsv"
)

#First get the OTU table from physeq
physeq_otu_table <- data.frame(otu_table(physeq),check.names = F)

row.names(data_new)<-metadata$SampleID
tax.clean = tax.clean[row.names(tax.clean) %in% rownames(physeq_otu_table),]
metadata.filtered = data_new[data_new$SampleID %in% colnames(physeq_otu_table),]

#Assign as variables to be feed into phyloseq
OTU.physeq = otu_table(as.matrix(physeq_otu_table), taxa_are_rows=TRUE)

#our edited and formatted taxonomy table from the top of this script
tax.physeq = tax_table(as.matrix(tax.clean))    
meta.physeq = sample_data(metadata.filtered)

#merge these into an object of class phyloseq.
physeq_bar_plot = phyloseq(OTU.physeq, tax.physeq, meta.physeq)

#set colors for plotting
my_colors <- c(
  '#a6cee3','#1f78b4','#b2df8a','#33a02c','#fb9a99','#e31a1c',
  '#fdbf6f','#ff7f00','#cab2d6','#6a3d9a','#ffff99','#b15928', 
  "#CBD588", "#5F7FC7", "orange","#DA5724", "#508578", "#CD9BCD",
  "#AD6F3B", "#673770","#D14285", "#652926", "#C84248", 
  "#8569D5", "#5E738F","#D1A33D", "#8A7C64", "#599861", "gray", "black", "pink",
  "blue", "orange", "green", "magenta", "violet", "red", "yellow"
)

#If you want different taxonomic level, find and replace the taxonomic level listed here
my_level <- c("Phylum", "Family", "Genus")
my_column <- "Breed"

abund_filter <- 0.02

for(ml in my_level){
  print(ml)
  
  taxa.summary <- physeq_bar_plot %>%
    tax_glom(taxrank = ml, NArm = FALSE) %>%  
    transform_sample_counts(function(x) {x/sum(x)} ) %>% 
    psmelt()  %>%                               
    group_by(get(my_column), get(ml)) %>%
    summarise(Abundance.average=mean(Abundance)) 
  taxa.summary <- as.data.frame(taxa.summary)
  colnames(taxa.summary)[1] <- my_column
  colnames(taxa.summary)[2] <- ml
  
  physeq.taxa.average <- taxa.summary %>% 
    group_by(get(ml)) %>%
    summarise(overall.max=max(Abundance.average))
  
  physeq.taxa.average <- as.data.frame(physeq.taxa.average)
  colnames(physeq.taxa.average)[1] <- ml
  
  #merge the phyla means with the metadata
  physeq_meta <- merge(taxa.summary, physeq.taxa.average)
  
  physeq_meta_filtered <- filter(physeq_meta, overall.max>abund_filter)
  
  #plot 
  ggplot(physeq_meta_filtered, aes(x = get(my_column), y = Abundance.average, fill = get(ml))) + 
    geom_bar(stat = "identity") +
    scale_fill_manual(values = my_colors) +
    ylim(c(0,1)) +
    guides(fill = guide_legend(reverse = F, keywidth = 0.5, keyheight = 0.5, ncol = 1)) +
    theme(legend.text=element_text(size=8.5)) +
    theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 1)) +
    theme(legend.title = element_blank()) +
    ylab("Relative Abundance") +
    xlab(my_column) +
    theme(axis.title = element_text(size = 10)) +
    theme(axis.text = element_text(size = 10)) +
    theme(legend.text = element_text(size = 10)) +
    ggtitle(paste0(ml, " (>", abund_filter * 100,"%) in at least 1 Treatment Group")) 
  ggsave(paste0("output/", ml, "BarPlot_Breed.png"), height = 4, width =5)
}

######################################
#Obtain individual taxa bar plots for challenge#
######################################
#If you want different taxonomic level, find and replace the taxonomic level listed here
my_level <- c("Phylum", "Family", "Genus")
my_column <- "Challenge"

abund_filter <- 0.02

for(ml in my_level){
  print(ml)
  
  taxa.summary <- physeq_bar_plot %>%
    tax_glom(taxrank = ml, NArm = FALSE) %>%  
    transform_sample_counts(function(x) {x/sum(x)} ) %>% 
    psmelt()  %>%                               
    group_by(get(my_column), get(ml)) %>%
    summarise(Abundance.average=mean(Abundance)) 
  taxa.summary <- as.data.frame(taxa.summary)
  colnames(taxa.summary)[1] <- my_column
  colnames(taxa.summary)[2] <- ml
  
  physeq.taxa.average <- taxa.summary %>% 
    group_by(get(ml)) %>%
    summarise(overall.max=max(Abundance.average))
  
  physeq.taxa.average <- as.data.frame(physeq.taxa.average)
  colnames(physeq.taxa.average)[1] <- ml
  
  #merge the phyla means with the metadata
  physeq_meta <- merge(taxa.summary, physeq.taxa.average)
  
  physeq_meta_filtered <- filter(physeq_meta, overall.max>abund_filter)
  
  #plot 
  ggplot(physeq_meta_filtered, aes(x = get(my_column), y = Abundance.average, fill = get(ml))) + 
    geom_bar(stat = "identity") +
    scale_fill_manual(values = my_colors) +
    ylim(c(0,1)) +
    guides(fill = guide_legend(reverse = F, keywidth = 0.5, keyheight = 0.5, ncol = 1)) +
    theme(legend.text=element_text(size=8.5)) +
    theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 1)) +
    theme(legend.title = element_blank()) +
    ylab("Relative Abundance") +
    xlab(my_column) +
    theme(axis.title = element_text(size = 10)) +
    theme(axis.text = element_text(size = 10)) +
    theme(legend.text = element_text(size = 10)) +
    ggtitle(paste0(ml, " (>", abund_filter * 100,"%) in at least 1 Treatment Group")) 
  ggsave(paste0("output/", ml, "BarPlot_Challenge.png"), height = 4, width =5)
}

######################################
#Obtain facet taxa bar plots for challenge and breed#
######################################
#If you want different taxonomic level, find and replace the taxonomic level listed here
my_level <- c("Phylum", "Family", "Genus")
my_column <- "Challenge"
my_column2 <- "Breed"

abund_filter <- 0.02

for(ml in my_level){
  print(ml)
  
  taxa.summary <- physeq_bar_plot %>%
    tax_glom(taxrank = ml, NArm = FALSE) %>%
    transform_sample_counts(function(x) {x/sum(x)} ) %>% 
    psmelt()  %>%                               
    group_by(get(my_column), get(ml), get (my_column2)) %>%
    summarise(Abundance.average=mean(Abundance)) 
  taxa.summary <- as.data.frame(taxa.summary)
  colnames(taxa.summary)[1] <- my_column
  colnames(taxa.summary)[3] <- my_column2
  colnames(taxa.summary)[2] <- ml
  
  physeq.taxa.average <- taxa.summary %>% 
    group_by(get(ml)) %>%
    summarise(overall.max=max(Abundance.average))
  
  physeq.taxa.average <- as.data.frame(physeq.taxa.average)
  colnames(physeq.taxa.average)[1] <- ml
  
  #merge the phyla means with the metadata
  physeq_meta <- merge(taxa.summary, physeq.taxa.average)
  
  physeq_meta_filtered <- filter(physeq_meta, overall.max>abund_filter)
  
  #Plot 
  ggplot(physeq_meta_filtered, aes(x = get(my_column), y = Abundance.average, fill = get(ml))) + 
    facet_grid(. ~ get(my_column2))+
    geom_bar(stat = "identity") +
    scale_fill_manual(values = my_colors) +
    ylim(c(0,1)) +
    guides(fill = guide_legend(reverse = F, keywidth = 0.5, keyheight = 0.5, ncol = 1)) +
    theme(legend.text=element_text(size=8.5)) +
    theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 1)) +
    theme(legend.title = element_blank()) +
    ylab("Relative Abundance") +
    xlab(my_column) +
    theme(axis.title = element_text(size = 10)) +
    theme(axis.text = element_text(size = 10)) +
    theme(legend.text = element_text(size = 10)) +
    ggtitle(paste0(ml, " (>", abund_filter * 100,"%) in at least 1 Treatment Group")) 
  ggsave(paste0("output/", ml, "BarPlot_ChallengeBreed.png"), height = 4, width =5)
}

######################################
#Differential abundance with DESeq of genera for Breed#
######################################
#Adapted from https://joey711.github.io/phyloseq-extensions/DESeq2.html
#load DESeq package
library (DESeq2)

#To use DESeq, OTU table cannot have zeros so we edit the table by multiplying by 2 and + 1
#First get the OTU table from physeq
physeq_otu_table <- data.frame(otu_table(physeq), check.names = FALSE)
OTU.clean2 <- physeq_otu_table + 1

#Now make the phyloseq object:
OTU.physeq = otu_table(as.matrix(OTU.clean2), taxa_are_rows=TRUE)
tax.physeq = tax_table(as.matrix(tax.clean))
meta.physeq = sample_data(metadata.filtered)

#We then merge these into an object of class phyloseq.
physeq_deseq = phyloseq(OTU.physeq, tax.physeq, meta.physeq)

#The following two lines actually do all the complicated DESeq2 work. The function phyloseq_to_deseq2 converts your phyloseq-format microbiome data into a DESeqDataSet with dispersions estimated, using the experimental design formula, also shown (the ~body.site term). The DESeq function does the rest of the testing, in this case with default testing framework, but you can actually use alternatives.
diagdds = phyloseq_to_deseq2(physeq_deseq, ~ Breed)
diagdds = DESeq(diagdds, test="Wald", fitType="parametric")
#the test type of "Wald" tests for significance of coefficients in a Negative Binomial GLM. This is generally a pretty good assumption for sequencing experiments. This was designed with RNA-seq in mind, but also pretty good for 16S sequencing.

###Investigate test results table
#The following results function call creates a table of the results of the tests. Very fast. The hard work was already stored with the rest of the DESeq2-related data in our latest version of the diagdds object (see above). I then order by the adjusted p-value, removing the entries with an NA value. The rest of this example is just formatting the results table with taxonomic information for nice(ish) display in the HTML output.
#Contrast: this argument specifies what comparison to extract from the object to build a results table. There are exactly three elements:
#  1. the name of a factor in the design formula, 
#  2. the name of the numerator level for the fold change, and 
#  3. the name of the denominator level for the fold change (simplest case)

alpha = 0.05
my_contrast = c("Breed", "SG", "CONV")
res <- results(diagdds, cooksCutoff = FALSE)

sigtab = res[which(res$padj < alpha), ]
sigtab = cbind(as(sigtab, "data.frame"), as(tax_table(physeq_deseq)[rownames(sigtab), ], "matrix"))

#reset par
par(mfrow=c(1,1))
#make a basic volcano plot
with(res, plot(log2FoldChange, -log10(padj), pch=20, main="Volcano plot", xlim=c(-15,15)))

#add colored points: blue if padj<0.01, red if log2FC>1 and padj<0.05)
with(subset(res, padj<.01 ), points(log2FoldChange, -log10(pvalue), pch=20, col="blue"))
with(subset(res, padj<.01 & abs(log2FoldChange)>2), points(log2FoldChange, -log10(pvalue), pch=20, col="red"))

#Let's look at the OTUs that were significantly different between the two treatment groups. The following makes a nice ggplot2 summary of the results.
x = tapply(sigtab$log2FoldChange, sigtab$Genus, function(x) max(x))
x = sort(x, TRUE)
sigtab$Genus = factor(as.character(sigtab$Genus), levels=names(x))
DESeq_fig = ggplot(sigtab, aes(x=Genus, y = log2FoldChange, color=Phylum)) + 
  geom_point(size=3) + 
  ylab(paste0("(", my_contrast[3], "/", my_contrast[2], ")\n", "log2FoldChange")) +
  scale_color_manual(values = my_colors) +
  theme(axis.text.x = element_text(angle = -90, hjust = 0, vjust=0.5))
ggsave(paste0("output/DESeq2-", my_contrast[3], "-", my_contrast[2], ".png"), DESeq_fig, height = 6, width = 10)

######################################
#Differential abundance with DESeq of genera for Challenge#
######################################
#The following two lines actually do all the complicated DESeq2 work. The function phyloseq_to_deseq2 converts your phyloseq-format microbiome data into a DESeqDataSet with dispersions estimated, using the experimental design formula, also shown (the ~body.site term). The DESeq function does the rest of the testing, in this case with default testing framework, but you can actually use alternatives.
diagdds = phyloseq_to_deseq2(physeq_deseq, ~ Challenge)
diagdds = DESeq(diagdds, test="Wald", fitType="parametric")
#the test type of "Wald" tests for significance of coefficients in a Negative Binomial GLM. This is generally a pretty good assumption for sequencing experiments. This was designed with RNA-seq in mind, but also pretty good for 16S sequencing.

###Investigate test results table
#The following results function call creates a table of the results of the tests. Very fast. The hard work was already stored with the rest of the DESeq2-related data in our latest version of the diagdds object (see above). I then order by the adjusted p-value, removing the entries with an NA value. The rest of this example is just formatting the results table with taxonomic information for nice(ish) display in the HTML output.
#Contrast: this argument specifies what comparison to extract from the object to build a results table. There are exactly three elements:
#  1. the name of a factor in the design formula, 
#  2. the name of the numerator level for the fold change, and 
#  3. the name of the denominator level for the fold change (simplest case)

alpha = 0.05
my_contrast = c("Challenge", "ST", "C")
res <- results(diagdds, cooksCutoff = FALSE)

sigtab = res[which(res$padj < alpha), ]
sigtab = cbind(as(sigtab, "data.frame"), as(tax_table(physeq_deseq)[rownames(sigtab), ], "matrix"))

#reset par
par(mfrow=c(1,1))
#make a basic volcano plot
with(res, plot(log2FoldChange, -log10(padj), pch=20, main="Volcano plot", xlim=c(-15,15)))

#add colored points: blue if padj<0.01, red if log2FC>1 and padj<0.05)
with(subset(res, padj<.01 ), points(log2FoldChange, -log10(pvalue), pch=20, col="blue"))
with(subset(res, padj<.01 & abs(log2FoldChange)>2), points(log2FoldChange, -log10(pvalue), pch=20, col="red"))

#Let's look at the OTUs that were significantly different between the two treatment groups. The following makes a nice ggplot2 summary of the results.
x = tapply(sigtab$log2FoldChange, sigtab$Genus, function(x) max(x))
x = sort(x, TRUE)
sigtab$Genus = factor(as.character(sigtab$Genus), levels=names(x))
DESeq_fig = ggplot(sigtab, aes(x=Genus, y = log2FoldChange, color=Phylum)) + 
  geom_point(size=3) + 
  ylab(paste0("(", my_contrast[3], "/", my_contrast[2], ")\n", "log2FoldChange")) +
  scale_color_manual(values = my_colors) +
  theme(axis.text.x = element_text(angle = -90, hjust = 0, vjust=0.5))
ggsave(paste0("output/DESeq2-", my_contrast[3], "-", my_contrast[2], ".png"), DESeq_fig, height = 6, width = 10)

#End of script